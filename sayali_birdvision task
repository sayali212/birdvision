pip install flask flask_sqlalchemy pytest
# app.py
from flask import Flask, request, jsonify, abort
from models import Product
from db import db, init_db

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///products.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db.init_app(app)

@app.route('/products', methods=['GET'])
def get_products():
    products = Product.query.all()
    return jsonify([p.to_dict() for p in products])

@app.route('/products/<int:id>', methods=['GET'])
def get_product_by_id(id):
    product = Product.query.get(id)
    if not product:
        abort(404, description="Product not found")
    return jsonify(product.to_dict())

@app.route('/products', methods=['POST'])
def create_product():
    data = request.get_json()
    if 'title' not in data or 'price' not in data:
        abort(400, description="Title and price are required")
    new_product = Product(title=data['title'], description=data.get('description', ''), price=data['price'])
    db.session.add(new_product)
    db.session.commit()
    return jsonify(new_product.to_dict()), 201

@app.route('/products/<int:id>', methods=['PUT'])
def update_product(id):
    product = Product.query.get(id)
    if not product:
        abort(404, description="Product not found")
    data = request.get_json()
    product.title = data.get('title', product.title)
    product.description = data.get('description', product.description)
    product.price = data.get('price', product.price)
    db.session.commit()
    return jsonify(product.to_dict())

@app.route('/products/<int:id>', methods=['DELETE'])
def delete_product(id):
    product = Product.query.get(id)
    if not product:
        abort(404, description="Product not found")
    db.session.delete(product)
    db.session.commit()
    return '', 204

if __name__ == '__main__':
    with app.app_context():
        init_db()
    app.run(debug=True)
# models.py
from db import db

class Product(db.Model):
    __tablename__ = 'products'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(255))
    price = db.Column(db.Float, nullable=False)

    def to_dict(self):
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'price': self.price
        }
# db.py
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def init_db():
    db.create_all()
# tests/test_products.py
import pytest
from app import app
from db import db, init_db
from models import Product

@pytest.fixture(scope='module')
def test_client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        with app.app_context():
            init_db()
        yield client

@pytest.fixture(scope='function')
def new_product():
    return {
        'title': 'Sample Product',
        'description': 'This is a test product.',
        'price': 19.99
    }

def test_get_products(test_client):
    response = test_client.get('/products')
    assert response.status_code == 200

def test_create_product(test_client, new_product):
    response = test_client.post('/products', json=new_product)
    assert response.status_code == 201
    data = response.get_json()
    assert data['title'] == new_product['title']

def test_get_product_by_id(test_client):
    product = Product(title='Test', description='Test', price=10.0)
    db.session.add(product)
    db.session.commit()
    response = test_client.get(f'/products/{product.id}')
    assert response.status_code == 200
    assert response.get_json()['title'] == 'Test'

def test_update_product(test_client):
    product = Product(title='Test', description='Test', price=10.0)
    db.session.add(product)
    db.session.commit()
    response = test_client.put(f'/products/{product.id}', json={'title': 'Updated'})
    assert response.status_code == 200
    assert response.get_json()['title'] == 'Updated'

def test_delete_product(test_client):
    product = Product(title='Test', description='Test', price=10.0)
    db.session.add(product)
    db.session.commit()
    response = test_client.delete(f'/products/{product.id}')
    assert response.status_code == 204
# README.md
## Setup
1. Create a virtual environment and install dependencies:
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   pip install -r requirements.txt
python app.py
